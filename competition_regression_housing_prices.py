# -*- coding: utf-8 -*-
"""File for Competition_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qJHBy7C8xHPl6_ELZobVa8GB5ekI9m-b

## Load the train data and split it
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.compose import make_column_selector
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import OrdinalEncoder, StandardScaler, OneHotEncoder
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.metrics import root_mean_squared_error, r2_score, mean_absolute_error, root_mean_squared_log_error, mean_absolute_percentage_error
from sklearn import set_config

set_config(transform_output="pandas")

url = "https://drive.google.com/file/d/1-Q-7iDenYFWViRzr7WNc6o6PA27FzMLf/view?usp=sharing"
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
train_data = pd.read_csv(path)

train_data.info()

X=train_data.drop("Id",axis=1)

y = X.pop("SalePrice")

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=123)

"""## Load the test data and pop the id column"""

url = "https://drive.google.com/file/d/1WLsUXAjXVJKvgQMXffS0_47OP8E3kRfW/view?usp=sharing"
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
test_data = pd.read_csv(path)

id_column = test_data.pop('Id')

id_column

"""## Create the pipeline"""

#Ordinal encoder
X_cat = X.select_dtypes(exclude = 'number').columns
X_num = X.select_dtypes(include = 'number').columns

# Identify which columns you want to ordinally encode
ord_feat = ["ExterQual", "ExterCond", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "HeatingQC", "KitchenQual", "FireplaceQu", "GarageFinish", "GarageQual", "GarageCond", "PoolQC"]

# Create ordered lists for each of the ordinal features. Make sure to include the fill_value option

ExterQual_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
ExterCond_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
BsmtQual_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
BsmtCond_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
BsmtExposure_cats = ["N_A", "No", "Mn", "Av", "Gd"]
BsmtFinType1_cats = ["N_A", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"]
BsmtFinType2_cats = ["N_A", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"]
HeatingQC_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
KitchenQual_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
FireplaceQu_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
GarageFinish_cats = ["N_A", "Unf", "RFn", "Fin"]
GarageQual_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
GarageCond_cats = ["N_A", "Po", "Fa", "TA", "Gd", "Ex"]
PoolQC_cats = ["N_A", "Fa", "TA", "Gd", "Ex"]


# Create a list of the ordered lists
categories = [ExterQual_cats, ExterCond_cats, BsmtQual_cats, BsmtCond_cats, BsmtExposure_cats, BsmtFinType1_cats, BsmtFinType2_cats, HeatingQC_cats, KitchenQual_cats, FireplaceQu_cats, GarageFinish_cats, GarageQual_cats, GarageCond_cats, PoolQC_cats]

# Initialize encoder
ord_encoder = OrdinalEncoder(categories=categories)

# select categorical column names for Onehot encoder
cat_feat = X.select_dtypes(exclude="number").columns
oh_feat = list(set(cat_feat) - set(ord_feat))

#initialize one hot encoder
oh_encoder=OneHotEncoder(sparse_output=False,
                  drop="if_binary",
                  handle_unknown='ignore')

encoder = make_column_transformer(
    (ord_encoder, ord_feat),
    (oh_encoder, oh_feat)
)

#categorical pipe
cat_imputer=SimpleImputer(strategy="constant",
                  fill_value="N_A")

cat_pipe = make_pipeline(
    cat_imputer,
    encoder
)

#select num columns
num_feat = X.select_dtypes(include="number").columns
num_imputer = SimpleImputer()
num_pipe = make_pipeline(num_imputer)

preprocessor = make_column_transformer(
    (num_pipe, num_feat),
    (cat_pipe, cat_feat)
)
preprocessor

#select features according to the k highest scores
selector = SelectKBest(score_func=f_regression)

#adding KNN
rf_pipeline = make_pipeline(preprocessor,
                            selector,
                            RandomForestRegressor(random_state=42))

# define parameter grid
param_grid = {
    "selectkbest__k": range(24, 85, 20),
    "randomforestregressor__n_estimators": range(60, 140, 20),
    "randomforestregressor__min_samples_split": range(2, 6, 2)
}

# define GridSearchCV
search = GridSearchCV(rf_pipeline,
                      param_grid,
                      scoring='neg_mean_absolute_error',
                      cv=5,
                      n_jobs=-1,
                      verbose=1)

search.fit(X_train, y_train)

"""## Train the model"""

import sklearn.metrics
sklearn.metrics.get_scorer_names()

#my_search.fit(X_train,y_train)

my_model = search.best_estimator_
my_model

"""## Evaluate the model"""

train_pred = my_model.predict(X_train)
test_pred = my_model.predict(X_test)

train_rmse = root_mean_squared_error(y_train, train_pred)
test_rmse = root_mean_squared_error(y_test, test_pred)
train_r2 = r2_score(y_train, train_pred)
test_r2 = r2_score(y_test, test_pred)
train_rmsl = root_mean_squared_log_error(y_train, train_pred)
test_rmsl = root_mean_squared_log_error(y_test, test_pred)
train_map = mean_absolute_percentage_error(y_train, train_pred)
test_map = mean_absolute_percentage_error(y_test, test_pred)


print(f'Model Train MAP: {train_map:.2f}')
print(f'Model Test MAP : {test_map:.2f}\n')
print(f'Model Train r2: {train_r2:.2f}')
print(f'Model Test r2 : {test_r2:.2f}\n')
print(f'Model Train RMSE: {train_rmse:.2f}')
print(f'Model Test RMSE : {test_rmse:.2f}\n')
print(f'Model Train RSML: {train_rmsl:.2f}')
print(f'Model Test RSML : {test_rmsl:.2f}\n')

"""## Retrain the model on the full train dataset"""

my_model.fit(X,y)

"""## Make predictions with the test dataset and prepare the submission file"""

predictions = my_model.predict(test_data)

results = pd.DataFrame({
    'Id':id_column,
    'SalePrice':predictions
})

results

from google.colab import files
results.to_csv('submission_maryna_rf.csv',index=False)
files.download('submission_maryna_rf.csv')